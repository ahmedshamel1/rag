"""
Multi-Agent Virtual Assistant API Server

This FastAPI server provides endpoints for processing user prompts through different specialized agents.
The API supports processing user prompts for continual improvement of agent responses.
"""

from fastapi import FastAPI, Query
from pydantic import BaseModel
import uvicorn
import os

from chat_agents import multi_role_agent
from chat_agents import hr_agent

app = FastAPI()


@app.get("/")
async def root():
    """
    Root endpoint to verify the server is running.

    Returns:
        dict: A welcome message.
    """
    return {"message": "Welcome to Multi-Agent Virtual Assistant"}


class ProcessRequestBody(BaseModel):
    """
    Schema for processing user prompts.

    Attributes:
        user_prompt (str): The user's input prompt.
        agent (str): The target agent to handle the prompt.
    """
    user_prompt: str
    agent: str


@app.post("/process/")
async def process_prompt(request_data: ProcessRequestBody):
    """
    Processes a user prompt through the specified agent.

    Args:
        request_data (ProcessRequestBody): The user input and target agent.

    Returns:
        dict: The response generated by the corresponding agent.
    """
    try:
        user_prompt = request_data.user_prompt
        agent = request_data.agent
        if agent == "bakers":
            return {"response": multi_role_agent.get_baker_response(user_prompt)}
        elif agent == "hr":
            return {"response": hr_agent.hr_qa(user_prompt)}
        elif agent == "cofounder":
            return {"response": multi_role_agent.get_cofounder_response(user_prompt)}
        else:
            return {"response": "Unknown agent specified. Please use 'bakers', 'hr', or 'cofounder'."}
    except Exception as e:
        print(f"Error generating response: {e}")
        return {"response": "Sorry, I encountered an error while processing your request. Please try again!!"}


if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)
